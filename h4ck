#!/usr/bin/env python3

from cmd import Cmd
import readline

from fire import Fire

from lib.colors import *
from lib.files import LOCAL_DIR

BANNER = r"""
 _     _  _        _
| |__ | || |   ___| | __
| '_ \| || |_ / __| |/ /
| | | |__   _| (__|   <
|_| |_|  |_|  \___|_|\_\
"""

class CommandLine(Cmd):
    prompt = 'h4ck> '
    __slots__ = ('_modules', '_module', '_histfile', '_histfile_size')

    def __init__(self):
        super().__init__()
        import pkgutil
        self._histfile = LOCAL_DIR / 'histfile.txt'
        self._histfile_size = 1000
        prefix_len = len('modules.')
        self._modules = [name[prefix_len:] for _, name, is_p in pkgutil.walk_packages(
            ['modules'], prefix='modules.', onerror=lambda x: None
        ) if not is_p]
        self._module = None
        info('Available modules:', ', '.join(self._modules))

    def do_quit(self, _):
        return True

    def do_q(self, _):
        return True

    @staticmethod
    def methods(module):
        from inspect import getmembers, isfunction
        return getmembers(module, isfunction)

    def get_names(self):
        return dir(self)

    def do_unload(self):
        if self._module:
            for m_name, _ in self.methods(self._module):
                if m_name.startswith('_'):
                    continue
                delattr(self, 'do_%s' % m_name)
                delattr(self, 'help_%s' % m_name)

    def do_use(self, module):
        from importlib import import_module
        self.do_unload()
        try:
            self._module = import_module('modules.%s' % module)
            methods = []
            for m_name, method in self.methods(self._module):
                if m_name.startswith('_'):
                    continue
                methods.append(m_name)
                setattr(self, 'do_%s' % m_name, method)
                setattr(self, 'help_%s' % m_name, lambda: print(method.__doc__))
            info('Methods:', ', '.join(methods))
        except ModuleNotFoundError:
            err('Module', module, 'not found')
        except Exception as e:
            err(repr(e))
        else:
            self.prompt = 'h4ck.%s> ' % module

    def complete_use(self, text, line, si, ei):
        completions = self._modules
        return completions

    def preloop(self):
        if self._histfile.exists():
            readline.read_history_file(str(self._histfile))

    def postloop(self):
        readline.set_history_length(self._histfile_size)
        readline.write_history_file(str(self._histfile))
        print('Bye')


def main():
    from random import sample

    GREETINGS = [
        'Wh0a!',
        'Pwn3d',
        '1337',
        'Psst, do u want some exploits?',
        'P0w3r!',
        'I\'m in.',
        'All your base are belong to us!',
    ]

    cmdline = CommandLine()
    try:
        cmdline.cmdloop(
            '%s\n%s\n%s\n' % (
                BANNER,
                sample(GREETINGS, 1)[0],
                '='*40,
            )
        )
    except KeyboardInterrupt:
        cmdline.postloop()

if __name__ == "__main__":
    Fire(main)
